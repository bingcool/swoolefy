<?php

namespace Test\Scripts;

use Common\Library\Db\Mysql;
use Swoolefy\Core\Application;
use Swoolefy\Core\Coroutine\Context;
use Swoolefy\Core\Coroutine\Parallel;
use Test\Factory;
use Test\Logger\RunLog;

class FixedUser extends \Swoolefy\Script\MainCliScript
{
    /**
     * @var Mysql
     */
    protected $db;

    public function init()
    {
        parent::init();
        RunLog::info("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjj");
        RunLog::error("kkkkkkkkk");

        \Swoolefy\Core\Coroutine\Context::set('name','kkkkkkkkkkkkkkkkkkkkkkkk');
        Context::set('db_debug', true);
        goApp(function () {
            goApp(function () {
                goApp(function () {
                    $arrayCopy = \Swoolefy\Core\Coroutine\Context::getContext()->getArrayCopy();
                    //var_dump($arrayCopy);
                });
            });
        });
        $this->db = Factory::getDb();
    }

    public function fixName()
    {
        $list = [
            [
                'name' => 1
            ],
            [
                'name' => 2
            ],
            [
                'name' => 3
            ],
            [
                'name' => 4
            ],
            [
                'name' => 5
            ]
        ];

//        Parallel::run(2, $list, function ($item) {
//            $db2 = Factory::getDb();
//            var_dump('cid='.\Swoole\Coroutine::getCid().'spl_object_id-22='.spl_object_id($db2));
//            var_dump($item['name']);
//            $result1 = $db2->newQuery()->table('tbl_users')->limit(1)->select()->toArray();
//        }, 0.01);


        $parallel = new Parallel(10);
//        $parallel->add(function () {
//            sleep(2);
//            var_dump("ali");
//        },'ali');
//
//        $parallel->add(function () {
//            sleep(2);
//            var_dump("tengxu");
//        },'tengxu');
//
//        $parallel->add(function () {
//            sleep(2);
//            var_dump("baidu");
//        },'baidu');
//
//        $parallel->add(function () {
//            sleep(5);
//            var_dump("zijie");
//        },'zijie');

        $result = $parallel->runWait();
        $parallel = new Parallel(2);
        foreach ($list as &$item) {
            $parallel->add(function () use($item) {
                return $item['name'].'-'.'name';
            });
        }

        $result = $parallel->runWait();
        var_dump($result);

//        try {
//            $name = getenv('name');
//            var_dump("name=".$name);
//            //var_dump('Script test');
//            sleep(2);
//
            $db1 = Factory::getDb();
            var_dump('cid='.\Swoole\Coroutine::getCid().'spl_object_id-11='.spl_object_id($db1));
            $result1 = $db1->newQuery()->table('tbl_users')->limit(1)->select()->toArray();
            //var_dump($result1);
//
//            goApp(function () {
//                $db2 = Factory::getDb();
//                var_dump('cid='.\Swoole\Coroutine::getCid().'spl_object_id-22='.spl_object_id($db2));
//                $result1 = $db2->newQuery()->table('tbl_users')->limit(1)->select()->toArray();
//            });
//
//            goApp(function () {
//                $db3 = Factory::getDb();
//                var_dump('cid='.\Swoole\Coroutine::getCid().'spl_object_id-33='.spl_object_id($db3));
//                $result1 = $db3->newQuery()->table('tbl_users')->limit(1)->select()->toArray();
//            });
//
//        }catch (\Throwable $exception) {
//            var_dump($exception->getMessage());
//        }
    }

    public function onHandleException(\Throwable $throwable, array $context = [])
    {
        parent::onHandleException($throwable, $context); // TODO: Change the autogenerated stub
        $this->exitAll();
    }

}