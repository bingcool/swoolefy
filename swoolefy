#!/usr/bin/env php
<?php
/**
 * +----------------------------------------------------------------------
 * | swoolefy framework bases on swoole extension development, we can use it easily!
 * +----------------------------------------------------------------------
 * | Licensed ( https://opensource.org/licenses/MIT )
 * +----------------------------------------------------------------------
 * | @see https://github.com/bingcool/swoolefy
 * +----------------------------------------------------------------------
 */

// 定义注册的应用名和对应使用的协议

use Swoolefy\Core\BaseServer;

if (!defined('APP_NAMES')) {
    write("【Error】 APP_NAMES Missing defined, please check it");
    exit(0);
}

// env
defined('SWOOLEFY_DEV') or define('SWOOLEFY_DEV', 'dev');
defined('SWOOLEFY_TEST') or define('SWOOLEFY_TEST','test');
defined('SWOOLEFY_GRA') or define('SWOOLEFY_GRA', 'gra');
defined('SWOOLEFY_PRD') or define('SWOOLEFY_PRD', 'prd');
defined('SWOOLEFY_ENVS') or define('SWOOLEFY_ENVS', [
    SWOOLEFY_DEV,
    SWOOLEFY_TEST,
    SWOOLEFY_GRA,
    SWOOLEFY_PRD,
]);


// src dir
if (is_dir(__DIR__ . '/vendor/bingcool/swoolefy')) {
    $SCORE_DIR = __DIR__ . '/vendor/bingcool/swoolefy';
    $USERD_ENV = 'composer';
} else {
    $SCORE_DIR = __DIR__;
    $USERD_ENV = 'direct';
}

// 定义一个全局常量
defined('SCORE_DIR_ROOT') or define('SCORE_DIR_ROOT', $SCORE_DIR);
// 启动文件目录
defined('START_DIR_ROOT') or define('START_DIR_ROOT', __DIR__);
// 定义cli传参
defined("SWOOLEFY_CLI_PARAMS") or define('SWOOLEFY_CLI_PARAMS', $argv);
// 定义使用环境
defined('USERD_ENV') or define('USERD_ENV', $USERD_ENV);

// include composer的自动加载类完成命名空间的注册
include START_DIR_ROOT . '/vendor/autoload.php';

// include App应用层的自定义的自动加载类命名空间
if (isset($argv[2]) && in_array(trim($argv[2]), array_keys(APP_NAMES))) {
    $appName = trim($argv[2]);
    defined('APP_NAME') or define('APP_NAME', $appName);
    if (trim($argv[1]) != 'create') {
        $autoloaderFile = START_DIR_ROOT . "/{$appName}/autoloader.php";
        if (file_exists($autoloaderFile)) {
            include $autoloaderFile;
        }
    }
} else {
    if (isset($argv[2]) && $argv[2] != 'help') {
        help('');
        write("【Error】app_name is not in APP_NAME array in swoolefy file, please check it");
        return false;
    }
}

// env params
$cliParams = array_flip($argv);

$cliEnv = SWOOLEFY_DEV;

// system environment variables
$env = getenv("SWOOLEFY_CLI_ENV");

if(in_array($env, SWOOLEFY_ENVS)) {
    $cliEnv = $env;
}else {
    // cli command line set env eg -dev, -test, -gra, -prd
    foreach (SWOOLEFY_ENVS as $env) {
        if (isset($cliParams['-' . $env])) {
            $cliEnv = $env;
            break;
        }
    }
}

defined('SWOOLEFY_ENV') or define('SWOOLEFY_ENV', $cliEnv);
parseCliEnvParams();

function parseCliEnvParams()
{
    $cliParams = [];
    $args = array_splice($_SERVER['argv'], 3);
    array_reduce($args, function ($result, $item) use (&$cliParams) {
        // start daemon
        if (in_array($item, ['-D'])) {
            putenv('daemon=1');
            defined('IS_DAEMON') OR define('IS_DAEMON', 1);
        } else if (in_array($item, ['-f'])) {
            // stop force
            putenv('force=1');
            $cliParams['force'] = 1;
        } else {
            $item = ltrim($item, '--');
            putenv($item);
            list($env, $value) = explode('=', $item);
            if ($env && $value) {
                $cliParams[$env] = $value;
            }
        }
    });
    $cliParamsJson = json_encode($cliParams,JSON_UNESCAPED_UNICODE);
    putenv("ENV_CLI_PARAMS={$cliParamsJson}");
    return $cliParams;
}

function initCheck()
{
    try {
        if (version_compare(phpversion(), '7.2.0', '<')) {
            write("
                [Error] php version must >= 7.2.0, current php version = " . phpversion()
            );
            exit(0);
        }
        if (version_compare(swoole_version(), '4.4.5', '<')) {
            write("
                [Error] the swoole version must >= 4.4.5, current swoole version = " . swoole_version()
            );
            exit(0);
        }
    } catch (Exception $e) {
        write($e->getMessage());
        exit(0);
    }
}

function opCacheClear()
{
    if (function_exists('apc_clear_cache')) {
        apc_clear_cache();
    }
    if (function_exists('opcache_reset')) {
        opcache_reset();
    }
}

function commandParser()
{
    global $argv;
    $command = isset($argv[1]) ? $argv[1] : null;
    $appName = isset($argv[2]) ? $argv[2] : null;
    return ['command' => $command, 'app_name' => trim($appName)];
}

function createProject()
{
    $dirs = ['Config', 'Service', 'Protocol', 'Router', 'Storage'];
    $params = commandParser();
    $appName = $params['app_name'];
    $appRootDir = START_DIR_ROOT . "/{$appName}";
    if (is_dir($appRootDir)) {
        write("You had create {$appName} project dir");
        exit(0);
    }

    $protocol = APP_NAMES[$appName];
    if (!$protocol) {
        write("[Error] The app_name={$appName} is not in APP_NAME array in swoolefy file, please check it");
        exit(0);
    }

    if ($protocol == 'http') {
        $dirs = [
            'Config', 'Controller', 'Model', 'Module', 'Runtime', 'Router', 'Storage', 'Protocol'
        ];
    }

    $daemonFile = START_DIR_ROOT.'/daemon.php';
    if (!file_exists($daemonFile)) {
        @copy(START_DIR_ROOT.'/src/Stubs/DaemonStub.php', $daemonFile);
    }

    $cronFile = START_DIR_ROOT.'/cron.php';
    if (!file_exists($cronFile)) {
        @copy(START_DIR_ROOT.'/src/Stubs/CronStub.php', $cronFile);
    }

    $scriptFile = START_DIR_ROOT.'/script.php';
    if (!file_exists($scriptFile)) {
        @copy(START_DIR_ROOT.'/src/Stubs/ScriptStub.php', $scriptFile);
    }

    @mkdir($appRootDir, 0777, true);
    foreach ($dirs as $dir) {
        @mkdir($appRootDir . '/' . $dir, 0777, true);
        switch ($dir) {
            case 'Config':
            {
                $definesFile = $appRootDir . '/' . $dir . '/constants.php';
                if (!file_exists($definesFile)) {
                    file_put_contents($definesFile, getDefines());
                }

                foreach (SWOOLEFY_ENVS as $env) {
                    $configFile = $appRootDir . '/' . $dir . '/config-' . $env . '.php';
                    if (!file_exists($configFile)) {
                        file_put_contents($configFile, getDefaultConfig());
                    }
                }
                break;
            }
            case 'Controller':
            {
                $controllerFile = $appRootDir . '/' . $dir . '/IndexController.php';
                if (!file_exists($controllerFile)) {
                    file_put_contents($controllerFile, getDefaultController());
                }
                break;
            }
            case 'Model':
            {
                $modelFile = $appRootDir . '/' . $dir . '/DemoModel.php';
                if (!file_exists($modelFile)) {
                    file_put_contents($modelFile, getDefaultModel());
                }
                break;
            }
            case 'Router':
            {
                switch ($protocol) {
                    case 'http':
                        $apiFile = START_DIR_ROOT . "/{$appName}/{$dir}/Api.php";
                        @copy(SCORE_DIR_ROOT . '/src/Stubs/Api.php', $apiFile);
                        break;
                    case 'udp':
                    case 'websocket':
                        $apiFile = START_DIR_ROOT . "/{$appName}/{$dir}/ServiceApi.php";
                        @copy(SCORE_DIR_ROOT . '/src/Stubs/ServiceApi.php', $apiFile);
                        break;
                    default:
                        break;
                }
            }
            case 'Protocol':
            {
                $path = START_DIR_ROOT . "/{$appName}/Protocol";
                foreach (SWOOLEFY_ENVS as $env) {
                    $configFile = $path . "/config-{$env}.php";
                    if (!file_exists($configFile)) {
                        switch ($protocol) {
                            case 'http':
                                @copy(SCORE_DIR_ROOT . '/src/Http/config.php', $configFile);
                                break;
                            case 'rpc':
                                @copy(SCORE_DIR_ROOT . '/src/Rpc/config.php', $configFile);
                                break;
                            case 'udp':
                                @copy(SCORE_DIR_ROOT . '/src/Udp/config.php', $configFile);
                                break;
                            case 'websocket':
                                @copy(SCORE_DIR_ROOT . '/src/Websocket/config.php', $configFile);
                                break;
                            case 'mqtt':
                                @copy(SCORE_DIR_ROOT . '/src/Mqtt/config.php', $configFile);
                                break;
                        }

                    }
                }
            }
        }
    }
}

function isWorkerService(): bool
{
    if(isDaemonService() || isCliScript() || isCronService()) {
        return true;
    }
    return false;
}

function isDaemonService()
{
    if(defined('IS_DAEMON_SERVICE') && IS_DAEMON_SERVICE == 1 ) {
        return true;
    }
    return false;
}

function isCronService(): bool
{
    if(defined('IS_CRON_SERVICE') && IS_CRON_SERVICE == 1 ) {
        return true;
    }
    return false;
}

function isScriptService(): bool
{
    return isCliScript();
}

function isCliScript(): bool
{
    if(defined('IS_CLI_SCRIPT') && IS_CLI_SCRIPT == 1) {
        return true;
    }
    return false;
}

function startServer($server_name)
{
    foreach (APP_NAMES as $appName => $protocol) {
        try {
            if ($appName == $server_name) {
                switch ($protocol) {
                    case 'http':
                        startHttpService($appName);
                        break;
                    case 'websocket':
                        startWebsocket($appName);
                        break;
                    case 'rpc':
                        startRpc($appName);
                        break;
                    case 'udp':
                        startUdp($appName);
                        break;
                    case 'mqtt':
                        startMqtt($appName);
                        break;
                    default:
                        write("Protocol is not in 【'http','websocket','rpc','udp','mqtt'】");
                        break;
                }
            }
        }catch (\Throwable $throwable) {
            write($throwable->getMessage());
            write($throwable->getTraceAsString());
            exit(0);
        }
    }
}

function startHttpService($app_name, $event_server_file_name = 'HttpServer')
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . "/config-" . SWOOLEFY_ENV . ".php";
    checkRunning($config);
    if($config['app_conf'] === true) {
        $config['app_conf'] = include START_DIR_ROOT . '/' . APP_NAME . '/Config/config-' . SWOOLEFY_ENV . '.php';
    }

    $eventServerFile = START_DIR_ROOT . "/{$app_name}/{$event_server_file_name}.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\http";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    $routerDir = START_DIR_ROOT . "/{$app_name}/Router";
    if(!is_dir($routerDir)) {
        mkdir($routerDir);
    }

    commonHandle($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $http = new $class($config);
    $http->start();
}

function startWebsocket($app_name, $event_server_file_name = 'WebsocketEventServer')
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . "/config-" . SWOOLEFY_ENV . ".php";
    checkRunning($config);
    $eventServerFile = START_DIR_ROOT . "/{$app_name}/{$event_server_file_name}.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\websocket";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    $routerDir = START_DIR_ROOT . "/{$app_name}/Router";
    if(!is_dir($routerDir)) {
        mkdir($routerDir);
    }

    commonHandle($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $websocket = new $class($config);
    $websocket->start();
}

function startRpc($app_name, $event_server_file_name = 'RpcServer')
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . "/config-" . SWOOLEFY_ENV . ".php";
    checkRunning($config);

    $eventServerFile = START_DIR_ROOT . "/{$app_name}/{$event_server_file_name}.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\rpc";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    commonHandle($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $rpc = new $class($config);
    $rpc->start();
}

function startUdp($app_name, $event_server_file_name = 'UdpEventServer')
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . "/config-" . SWOOLEFY_ENV . ".php";
    checkRunning($config);

    $eventServerFile = START_DIR_ROOT . "/{$app_name}/{$event_server_file_name}.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\udp";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    $routerDir = START_DIR_ROOT . "/{$app_name}/Router";
    if(!is_dir($routerDir)) {
        mkdir($routerDir);
    }

    commonHandle($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $udp = new $class($config);
    $udp->start();
}

function startMqtt($app_name, $event_server_file_name = 'MqttServer')
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . "/config-" . SWOOLEFY_ENV . ".php";
    checkRunning($config);

    $eventServerFile = START_DIR_ROOT . "/{$app_name}/{$event_server_file_name}.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\mqtt";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    commonHandle($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $mqtt = new $class($config);
    $mqtt->start();
}

function commonHandle(&$config)
{
    if (isDaemon()) {
        $config['setting']['daemonize'] = true;
    }
    makeDirLogAndPid($config);
    setEnvParams($config);

    $eventServerFile = START_DIR_ROOT . "/".APP_NAME."/Event.php";
    if (!file_exists($eventServerFile)) {
        $search_str = "protocol\\event";
        $replace_str = APP_NAME;
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/src/Stubs/EventHandle.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($eventServerFile, $file_content_string);
    }

    $autoloaderFile = START_DIR_ROOT . "/".APP_NAME."/autoloader.php";
    if (!file_exists($autoloaderFile)) {
        $search_str = "<{APP_NAME}>";
        $replace_str = APP_NAME;
        $file_content_string = file_get_contents(SCORE_DIR_ROOT . "/autoloader.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string, $count);
        file_put_contents($autoloaderFile, $file_content_string);
        include $autoloaderFile;
    }


}

function stopServer($app_name)
{
    if(!isWorkerService()) {
        echo "1、你确定停止应用【{$app_name}】? (yes or no):";
    }else {
        echo "1、你确定停止workerService【".WORKER_SERVICE_NAME."】? (yes or no):";
    }

    $lineValue = '';
    while ($lineValue == '') {
        $lineValue = trim(fgets(STDIN));
    }

    if(strtolower($lineValue) == 'yes') {
        if(!isWorkerService()) {
            commonStop($app_name);
        }else {
            workerStop($app_name);
        }
    }else {
        if(!isWorkerService()) {
            write("\n你已放弃停止应用{$app_name},应用继续running中");
        }else {
            write("\n你已放弃停止workerService【".WORKER_SERVICE_NAME."】,应用继续running中");
        }
        exit(0);
    }
}

function commonStop($app_name)
{
    $pidFile = getPidFile($app_name);
    if (!is_file($pidFile)) {
        write("[Error] pid file={$pidFile} is not exist, please check the server whether running");
        exit(0);
    }

    $pid = intval(file_get_contents($pidFile));
    if (!\Swoole\Process::kill($pid, 0)) {
        write("[Error] Server Stop!");
        exit(0);
    }

    \Swoole\Process::kill($pid, SIGTERM);
    // 如果'reload_async' => true,，则默认workerStop有30s的过度期停顿这个时间稍微会比较长，设置成60过期
    $nowTime = time();
    write("
        Server begin to stopping at " . date("Y-m-d H:i:s") . ", pid={$pid}. please wait a moment..."
    );
    while (true) {
        sleep(1);

        if(\Swoole\Process::kill($pid, 0) && time() > 30) {
            \Swoole\Process::kill($pid, SIGKILL);
            sleep(1);
        }

        if (!\Swoole\Process::kill($pid, 0)) {
            write("
        ---------------------stop info-------------------\n    
        Server Stop  OK. server stop at " . date("Y-m-d H:i:s")
            );
            @unlink($pidFile);
            break;
        } else {
            if (time() - $nowTime > 60) {
                write("---------------------------stop info-----------------------");
                write("Please use 'ps -ef | grep php-swoolefy' checkout swoole whether or not stop");
                break;
            }
        }
    }
    \Swoole\Process::wait();
    exit(0);
}

function workerStop($appName)
{
    $pidFile = getPidFile($appName);
    if (!is_file($pidFile)) {
        write("【Error】 pid file={$pidFile} is not exist, please check the server whether running");
        exit(0);
    }

    $masterPid = file_get_contents($pidFile);
    if (is_numeric($masterPid) && $masterPid > 0) {
        $masterPid = (int)$masterPid;
    } else {
        write("【Warning】Master Pid is invalid");
        exit(0);
    }

    if (\Swoole\Process::kill($masterPid, 0)) {
        $pipeMsgDto = new \Swoolefy\Worker\Dto\PipeMsgDto();
        $pipeMsgDto->action = WORKER_CLI_STOP;
        $pipeMsg = serialize($pipeMsgDto);

        // mainWorker Process
        $workerPid = file_get_contents(WORKER_PID_FILE);
        if(\Swoole\Process::kill($workerPid, 0)) {
            $cliPipeFile = WORKER_CLI_PIPE;
            $pipe = @fopen($cliPipeFile, 'w+');
            if (flock($pipe, LOCK_EX)) {
                fwrite($pipe, $pipeMsg);
                flock($pipe, LOCK_UN);
            }
            fclose($pipe);
        }

        sleep(3);

        if (getenv('force')) {
            $result = @\Swoole\Process::kill($masterPid, SIGKILL);
        } else {
            $result = \Swoole\Process::kill($masterPid, SIGTERM);
        }

        if ($result) {
            write("【Info】Master and Children Process start to stop, please wait a time", 'light_green');
        }

        $startStopTime = time();
        while (\Swoole\Process::kill($masterPid, 0)) {
            if (time() - $startStopTime > 10) {
                break;
            }
            sleep(1);
        }

        if (\Swoole\Process::kill($masterPid, 0)) {
            \Swoole\Process::kill($masterPid, SIGKILL);
        }

        write("【Info】Master and Children Process Stop OK!", 'light_green');
    } else {
        write("【Warning】Master Process of Pid={$masterPid} is not running");
    }

    exit(0);
}

function makeDirLogAndPid(array &$config)
{
    if (isset($config['setting']['log_file'])) {
        $path = pathinfo($config['setting']['log_file'], PATHINFO_DIRNAME);
        if (!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if (isset($config['setting']['pid_file'])) {
        $path = pathinfo($config['setting']['pid_file'], PATHINFO_DIRNAME);
        if (!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if(isWorkerService() && defined('WORKER_PID_FILE_ROOT')) {
        if (!is_dir(WORKER_PID_FILE_ROOT)) {
            mkdir(WORKER_PID_FILE_ROOT, 0777, true);
        }
    }

    if (isCliScript()) {
        $path = pathinfo($config['setting']['pid_file'], PATHINFO_DIRNAME);
        $fileName = pathinfo($config['setting']['pid_file'], PATHINFO_FILENAME);
        $config['setting']['pid_file'] = $path.'/'.$fileName.'_'.WORKER_PORT.'.pid';
        register_shutdown_function(function () use($config) {
            if (is_file($config['setting']['pid_file'])) {
                @unlink($config['setting']['pid_file']);
            }
        });

        $files = scandir($path);
        foreach($files as $f) {
            $filePath = $path . '/' . $f;
            if ($f == '.' || $f == '..' || is_dir($filePath)) {
                continue;
            }
            $pid = file_get_contents($filePath);
            if(is_numeric($pid)) {
                if(!\Swoole\Process::kill($pid, 0)) {
                    @unlink($filePath);
                }
            }
        }
    }

    if (!isset($config['app_conf'])) {
        write("[Error] " . APP_NAME . "/Protocol/config-" . SWOOLEFY_ENV . ".php" . " must include app_conf file and set app_conf");
        exit(0);
    }
}

function reloadServer($app_name)
{
    $pidFile = getPidFile($app_name);

    if (!is_file($pidFile)) {
        write("[Error] pid file {$pidFile} is not exist, please check server is running");
        return;
    }

    $pid = intval(file_get_contents($pidFile));
    if (!\Swoole\Process::kill($pid, 0)) {
        write("[Error] pid={$pid} not exist");
        return;
    }
    // 发送信号，reload只针对worker进程
    \Swoole\Process::kill($pid, SIGUSR1);
    write(
        "Server worker process begin to reload at " . date("Y-m-d H:i:s") . ". please wait a moment..."
    );
    sleep(2);
    write(
        "Server worker process reload successful at " . date("Y-m-d H:i:s"),
        'light_green'
    );
}

function statusServer($appName)
{
    $pidFile = getPidFile($appName);

    if(!isWorkerService()) {
        commonStatus($appName, $pidFile);
    }else {
        workerStatus($pidFile);
    }
}

function commonStatus($appName, $pidFile)
{
    if (!is_file($pidFile)) {
        write("【Error】pid file={$pidFile} is not exist, please check server weather is running");
        return;
    }

    $pid = intval(file_get_contents($pidFile));
    if (!\Swoole\Process::kill($pid, 0)) {
        write("Server Maybe Shutdown, You can use 'ps -ef | grep php-swoolefy' ");
        return;
    }

    $exec = 'ps -ef | grep php | grep ' .BaseServer::getAppPrefix(). ' | grep -v grep';

    exec($exec, $output, $return);

    if (empty($output)) {
        write("'ps -ef' not match {$appName}-swoolefy");
        return;
    }

    foreach ($output as $value) {
        write(
            trim($value),
            'light_green'
        );
    }
}

function workerStatus($pidFile)
{
    if (!is_file($pidFile)) {
        write("【Error】pid file={$pidFile} is not exist, please check server weather is running");
        return;
    }

    $masterPid = file_get_contents($pidFile);
    if (is_numeric($masterPid)) {
        $masterPid = (int)$masterPid;
    } else {
        write("【Warning】Master Worker Pid is invalid");
        exit(0);
    }

    if (!\Swoole\Process::kill($masterPid, 0)) {
        write("【Warning】Master Process of Pid={$masterPid} is not running");
        exit(0);
    }

    $cliPipeFile = WORKER_CLI_PIPE;
    $ctlPipeFile = WORKER_CTL_PIPE;
    if (filetype($cliPipeFile) != 'fifo' || !file_exists($cliPipeFile)) {
        write("【Warning】 Master Process is not enable cli pipe, so can not show status");
        exit(0);
    }

    $pipe = fopen($cliPipeFile, 'r+');
    $pipeMsgDto = new \Swoolefy\Worker\Dto\PipeMsgDto();
    $pipeMsgDto->action = WORKER_CLI_STATUS;
    $pipeMsgDto->targetHandler = $ctlPipeFile;

    $pipeMsg = serialize($pipeMsgDto);
    if (file_exists($ctlPipeFile)) {
        unlink($ctlPipeFile);
    }

    posix_mkfifo($ctlPipeFile, 0777);
    $ctlPipe = fopen($ctlPipeFile, 'w+');
    stream_set_blocking($ctlPipe, false);
    \Swoole\Timer::after(3000, function () {
        \Swoole\Event::exit();
    });

    \Swoole\Event::add($ctlPipe, function () use ($ctlPipe) {
        $msg = fread($ctlPipe, 8192);
        write($msg, 'light_green');
        \Swoole\Event::exit();
    });

    sleep(1);
    fwrite($pipe, $pipeMsg);
    \Swoole\Event::wait();
    fclose($ctlPipe);
    fclose($pipe);
    unlink($ctlPipeFile);
    exit(0);
}


function monitorServer($app_name)
{
    $pidFile = getPidFile($app_name);

    if (!is_file($pidFile)) {
        write("[CheckSever] pid file {$pidFile} is not exist, please check server weather is running");
        return;
    }

    $pid = intval(file_get_contents($pidFile));
    if (!\Swoole\Process::kill($pid, 0)) {
        sleep(2);
        if(!\Swoole\Process::kill($pid, 0)) {
            write("[CheckSever] server had shutdown, now restarting .....");
            startServer($app_name);
        }
    }
}

function getPidFile($app_name)
{
    $path = START_DIR_ROOT . "/{$app_name}/Protocol";
    $config = include $path . '/config-' . SWOOLEFY_ENV . '.php';

    if(!isWorkerService()) {
        if (isset($config['setting']['pid_file'])) {
            $pidFile = $config['setting']['pid_file'];
            $path = pathinfo($config['setting']['pid_file'], PATHINFO_DIRNAME);
            if (!is_dir($path)) {
                mkdir($path, 0777, true);
            }
        }
        return $pidFile ?? '';
    }else {

        if (isset($config['setting']['pid_file'])) {
            $path = pathinfo($config['setting']['pid_file'], PATHINFO_DIRNAME);
            $path = $path.'/'.WORKER_SERVICE_NAME;
            if (!is_dir($path)) {
                mkdir($path, 0777, true);
            }
        }

        if(isset($config['setting']['pid_file'])) {
            $path = pathinfo($config['setting']['pid_file']);
            $pidFile = $path['dirname'].'/'.WORKER_SERVICE_NAME.'/'.$path['filename'].'_worker.'.$path['extension'];
        }
        return $pidFile ?? '';
    }
}

function checkRunning(array &$config)
{
    resetConf($config);
    if (isset($config['setting']['pid_file'])) {
        $pidFile = $config['setting']['pid_file'];
        if (is_file($pidFile)) {
            $pid = file_get_contents($pidFile);
            if (is_numeric($pid) && \Swoole\Process::kill($pid, 0)) {
                if(!isWorkerService()) {
                    write('【Warning】' . '['.APP_NAME .']'. " Server is running, pid={$pid}, pidFile={$pidFile}");
                    exit(0);
                }else {
                    write('【Warning】' .'['. WORKER_SERVICE_NAME .']'. " is running, pid={$pid}, pidFile={$pidFile}");
                    exit(0);
                }
            }
        }
    }
}

function help($command)
{
    switch (strtolower($command . '-' . 'help')) {
        case 'start-help':
        {
            write("------------swoolefy启动服务命令------------", 'light_green');
            showAppHelp('start', '启动');
            echo "\n";
            break;
        }
        case 'stop-help':
        {
            write("------------swoolefy终止服务命令------------", 'light_green');
            showAppHelp('stop', '终止');
            echo "\n";
            break;
        }

        case 'reload-help':
        {
            write("------------swoolefy平滑重启服务命令------------", 'light_green');
            showAppHelp('reload', '平滑重启');
            echo "\n";
            break;
        }

        case 'status-help':
        {
            write("------------swoolefy服务状态查看命令------------", 'light_green');
            showAppHelp('status', '服务状态');
            echo "\n";
            break;
        }

        case 'create-help':
        {
            write("------------swoolefy平滑重启服务命令------------", 'light_green');
            showAppHelp('create', '创建');
            echo "\n";
            break;
        }
        default:
        {
            write("------------欢迎使用swoolefy------------", 'light_green');
            write("有关某个命令的详细信息，请键入 help 命令:", 'light_green');
            write("1、php cli.php create help 查看创建项目详细信息!", 'light_green');
            write("2、php cli.php start help 查看启动服务详细信息!", 'light_green');
            write("3、php cli.php stop help 查看终止服务详细信息!", 'light_green');
            write("4、php cli.php reload help 查看平滑重启服务详细信息!", 'light_green');
            write("5、php cli.php status help 查看服务状态详细信息!", 'light_green');

        }
    }
}

function showAppHelp($cmd, $cmd_info)
{
    $index = 0;
    if (in_array($cmd, ['create', 'status', 'stop'])) {
        $envStr = '';
    }
    foreach (APP_NAMES as $app_name => $service) {
        $index++;
        $help_str = $index . "、php cli.php {$cmd} {$app_name} {$cmd_info} {$service}服务的{$app_name}项目";
        write($help_str, 'light_green');
    }
    $index++;
    write("{$index}、更多服务请修改配置变APP_NAME常量", 'light_green');
}

function commandHandler()
{
    opCacheClear();
    $command = commandParser();
    if (isset($command['app_name']) && $command['app_name'] != 'help') {
        switch ($command['command']) {
            case 'create':
            {
                createProject();
                break;
            }
            case "start":
            {
                startServer($command['app_name']);
                break;
            }
            case 'stop':
            {
                stopServer($command['app_name']);
                break;
            }
            case 'reload':
            {
                reloadServer($command['app_name']);
                break;
            }
            case 'status':
            {
                statusServer($command['app_name']);
                break;
            }
            case 'monitor':
            {
                monitorServer($command['app_name']);
                break;
            }
            case 'help':
            default:
            {
                help($command['command']);
            }
        }
    } else {
        help($command['command']);
    }
}

function write($msg, $foreground = "red", $background = "black")
{
    // Create new Colors class
    static $colors;
    if (!isset($colors)) {
        $colors = new \Swoolefy\Util\EachColor();
    }
    echo $colors->getColoredString($msg, $foreground, $background) . "\n\n";
}

function setEnvParams($config)
{
    global $argv;
    $params = array_flip($argv);
    if (isset($params['-h'])) {
        $h = $argv[$params['-h'] + 1];
        putenv("HOST_IP={$h}");
    }
    if (isset($config['port'])) {
        $port = $config['port'];
        putenv("HOST_PORT={$port}");
    }

    putenv("swoolefy_env=" . SWOOLEFY_ENV);
}

function isDaemon()
{
    global $argv;
    $params = array_flip($argv);
    if (isset($params['-d']) || isset($params['-D'])) {
        return true;
    }
    return false;
}

function resetConf(&$conf)
{
    if(isWorkerService()) {
        $conf['port'] = WORKER_PORT;
        $conf['setting']['enable_coroutine'] = 0;
        $conf['setting']['reactor_num'] = 1;
        $conf['setting']['worker_num'] = 1;
        $conf['setting']['task_worker_num'] = 1;

        if(isset($conf['setting']['log_file'])) {
            $path = pathinfo($conf['setting']['log_file']);
            $conf['setting']['log_file'] = $path['dirname'].'/'.WORKER_SERVICE_NAME.'/'.$path['filename'].'_worker.'.$path['extension'];
        }

        if(isset($conf['setting']['pid_file'])) {
            $path = pathinfo($conf['setting']['pid_file']);
            $conf['setting']['pid_file'] = $path['dirname'].'/'.WORKER_SERVICE_NAME.'/'.$path['filename'].'_worker.'.$path['extension'];
        }
        unset($conf['setting']['admin_server'], $conf['setting']['task_worker_num']);
    }
}

function getDefaultConfig()
{
    $content =
<<<EOF
<?php
// 应用配置
return [
    'components' => [
        // 用户行为记录的日志
        'log' => function(\$name) {
            \$logger = new \Swoolefy\Util\Log(\$name);
            \$logger->setChannel('application');
            \$logger->setLogFilePath(LOG_PATH.'/runtime.log');
            return \$logger;
        },

        // 系统捕捉异常错误日志
        'error_log' => function(\$name) {
            \$logger = new \Swoolefy\Util\Log(\$name);
            \$logger->setChannel('application');
            \$logger->setLogFilePath(LOG_PATH.'/error.log');
            return \$logger;
        },
    ]
];

EOF;
    return $content;
}

function getDefaultController()
{
    $APP_NAME = APP_NAME;
    $content =
<<<EOF
<?php
namespace {$APP_NAME}\Controller;

use Swoolefy\Core\Application;
use Swoolefy\Core\Controller\BController;

class IndexController extends BController {
    public function index() {
        Application::getApp()->response->write('<h1>Hello, Welcome to Swoolefy Framework! <h1>');
    }
}
EOF;
    return $content;
}

function getDefines()
{
    $APP_NAME = APP_NAME;
    $content =

<<<EOF
<?php
defined('APP_NAME') or define('APP_NAME', "{$APP_NAME}");
defined('APP_PATH') or define('APP_PATH', dirname(__DIR__));
defined('ROOT_PATH') or define('ROOT_PATH', dirname(APP_PATH));
defined('LOG_PATH') or define('LOG_PATH', APP_PATH.'/Storage/Logs');

EOF;
    return $content;
}

function getDefaultModel()
{
    $APP_NAME = APP_NAME;
    $content =
<<<EOF
<?php
namespace {$APP_NAME}\Model;

use Common\Library\Db\Model;

class DemoModel extends Model {
    
}
EOF;
    return $content;
}

function showLogo()
{
    $logo =
        <<<LOGO
  ______                                _           _ _ _ _
 /  ____|                              | |         |  _ _ _|  _   _
|  (__     __      __   ___     ___    | |   ___   | |       | | | |
 \___  \   \ \ /\ / /  / _ \   / _ \   | |  / _ \  | |_ _ _  | | | |
 ____)  |   \ V  V /  | (_) | | (_) |  | | | ___/  |  _ _ _| | |_| |
|_____ /     \_/\_/    \___/   \___/   |_|  \___|  | |        \__, |
                                                   |_|           | |
                                                              __ / |
                                                             |_ _ /
LOGO;
    write($logo, 'light_green');
}

(function ($callback = null) {
    $argv = SWOOLEFY_CLI_PARAMS;
    initCheck();
    showLogo();
    $command = $argv[1];
    if (is_callable($callback)) {
        call_user_func($callback, $command);
    }
    commandHandler();
})();
