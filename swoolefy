#!/usr/bin/env php
<?php
/**
 * +----------------------------------------------------------------------
 * | swoolefy framework bases on swoole extension development, we can use it easily!
 * +----------------------------------------------------------------------
 * | Licensed ( https://opensource.org/licenses/MIT )
 * +----------------------------------------------------------------------
 * | @see https://github.com/bingcool/swoolefy
 * +----------------------------------------------------------------------
 */

use Swoolefy\Cmd\MonitorCmd;
use Swoolefy\Cmd\ReloadCmd;
use Swoolefy\Cmd\SendCmd;
use Swoolefy\Cmd\StartCmd;
use Swoolefy\Cmd\CreateCmd;
use Swoolefy\Cmd\StatusCmd;
use Swoolefy\Cmd\StopCmd;
use Symfony\Component\Console\Application;

function isWorkerService(): bool
{
    if (isDaemonService() || isCliScript() || isCronService()) {
        return true;
    }
    return false;
}

function isDaemonService(): bool
{
    if (defined('IS_DAEMON_SERVICE') && IS_DAEMON_SERVICE == 1) {
        return true;
    }
    return false;
}

function isCronService(): bool
{
    if (defined('IS_CRON_SERVICE') && IS_CRON_SERVICE == 1) {
        return true;
    }
    return false;
}

function isScriptService(): bool
{
    return isCliScript();
}

function isCliScript(): bool
{
    if (defined('IS_CLI_SCRIPT') && IS_CLI_SCRIPT == 1) {
        return true;
    }
    return false;
}

function isDaemon(): bool
{
    $daemon = getenv('daemon');
    if (empty($daemon)) {
        return false;
    }
    return true;
}

function loadGlobalConf()
{
    return \Swoolefy\Core\SystemEnv::loadGlobalConf();
}

function env($key, $default = null)
{
    return \Swoolefy\Core\SystemEnv::get($key, $default);
}

function parseScriptPidFile(string $pidFile): string
{
    if (isScriptService()) {
        $path = pathinfo($pidFile, PATHINFO_DIRNAME);
        $fileName = pathinfo($pidFile, PATHINFO_FILENAME);
        $pidFile = $path . '/' . $fileName . '_' . WORKER_PORT . '.pid';
    }
    return $pidFile;

}
function write($msg, $foreground = "red", $background = "black")
{
    // Create new Colors class
    static $colors;
    if (!isset($colors)) {
        $colors = new \Swoolefy\Util\EachColor();
    }
    echo $colors->getColoredString($msg, $foreground, $background) . "\n\n";
}


function showLogo()
{
    $logo =
        <<<LOGO
  ______                                _           _ _ _ _
 /  ____|                              | |         |  _ _ _|  _   _
|  (__     __      __   ___     ___    | |   ___   | |       | | | |
 \___  \   \ \ /\ / /  / _ \   / _ \   | |  / _ \  | |_ _ _  | | | |
 ____)  |   \ V  V /  | (_) | | (_) |  | | | ___/  |  _ _ _| | |_| |
|_____ /     \_/\_/    \___/   \___/   |_|  \___|  | |        \__, |
                                                   |_|           | |
                                                              __ / |
                                                             |_ _ /
LOGO;
    write($logo, 'light_green');
}

(function () {
    $application = new Application();
    $application->add(new CreateCmd());
    $application->add(new StartCmd());
    $application->add(new StopCmd());
    $application->add(new StatusCmd());
    $application->add(new ReloadCmd());
    $application->add(new SendCmd());
    $application->add(new MonitorCmd());
    showLogo();
    $application->run();
})();
